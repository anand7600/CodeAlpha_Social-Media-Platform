// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  username     String    @unique
  email        String    @unique
  password     String
  bio          String?   // New field for user bio
  posts        Post[]
  comments     Comment[]
  likes        Like[]
  createdAt    DateTime  @default(now())

  // --- Explicit many-to-many self-relation for followers ---
  followingIDs String[]  @db.ObjectId
  followerIDs  String[]  @db.ObjectId

  following    User[]    @relation("UserFollows", fields: [followingIDs], references: [id])
  followers    User[]    @relation("UserFollows", fields: [followerIDs], references: [id])
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime  @default(now())
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String    @db.ObjectId
  comments  Comment[]
  likes     Like[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade) // Added onDelete
  postId    String   @db.ObjectId
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade) // Added onDelete
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

